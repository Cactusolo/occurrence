#Morphline that reads records from avro files and transform those records into SolrInputDocuments 

# Specify server locations in a SOLR_LOCATOR variable; used later in variable substitutions:
SOLR_LOCATOR : {
  # Name of solr collection
  collection : ${ENV_SOLR_COLLECTION}
  
  # ZooKeeper ensemble
  zkHost : ${ENV_ZK_HOST}
  
  # The maximum number of documents to send to Solr per network batch (throughput knob)
  # batchSize : 100
}

morphlines : [
  {
    id : occurrenceMorphlineImporter
    
    # Import all morphline commands in these java packages and their subpackages.
    importCommands : ["com.cloudera.**", "org.apache.solr.**"]
    
    commands : [                    
      { 
        # Parse Avro container file and emit a record for each avro object
        readAvroContainer {  
        }
      } 
      
      { 
        # Extract the values from Avro paths into fields.
        extractAvroPaths {
          flatten : true
          paths : { 
            key:/key
            dataset_key:/dataset_key
            institution_code:/institution_code
            collection_code:/collection_code
            catalog_number:/catalog_number    
            collector_name:/collector_name
            date:/date
            modified:/modified 
            taxon_key:/taxon_key
            country:/country
            publishing_country:/publishing_country
            latitude:/latitude
            longitude:/longitude
            coordinate: /coordinate
            year:/year
            month:/month
            basis_of_record:/basis_of_record
            geospatial_issue:/geospatial_issue
            georeferenced:/georeferenced
            altitude:/altitude
            depth:/depth
          }
        }
      }  
      {
        java {  
          imports : "import java.util.*;"        
          code: """
            List dataset_key = record.get("dataset_key");            
            if(dataset_key.contains("")) {
              record.removeAll("dataset_key");
            }
            List institution_code = record.get("institution_code");            
            if(institution_code.contains("")) {
              record.removeAll("institution_code");
            }
            List collection_code = record.get("collection_code");            
            if(collection_code.contains("")) {
              record.removeAll("collection_code");
            }
            List catalog_number = record.get("catalog_number");            
            if(catalog_number.contains("")) {
              record.removeAll("catalog_number");
            }
            List collector_name = record.get("collector_name");            
            if(collector_name.contains("")) {
              record.removeAll("collector_name");
            }
            List date = record.get("date");            
            if(date.contains(-1)) {
              record.removeAll("date");
            }
            List modified = record.get("modified");            
            if(modified.contains(-1)) {
              record.removeAll("modified");
            }
            List country = record.get("country");            
            if(country.contains("")) {
              record.removeAll("country");
            }
            List publishing_country = record.get("publishing_country");            
            if(publishing_country.contains("")) {
              record.removeAll("publishing_country");
            }            
            List latitude = record.get("latitude");            
            if(latitude.contains(-1000.0)) {
              record.removeAll("latitude");
            }
            List longitude = record.get("longitude");            
            if(longitude.contains(-1000.0)) {
              record.removeAll("longitude");
            }
            List coordinate = record.get("coordinate");            
            if(coordinate.contains("")) {
              record.removeAll("coordinate");
            }
            List year = record.get("year");            
            if(year.contains(-1)) {
              record.removeAll("year");
            }
            List month = record.get("month");            
            if(month.contains(-1)) {
              record.removeAll("month");
            }
            List basis_of_record = record.get("basis_of_record");            
            if(basis_of_record.contains(-1)) {
              record.removeAll("basis_of_record");
            } else if(basis_of_record.contains(4)) {
              record.removeAll("basis_of_record");
              record.put("basis_of_record",3);
            }                        
            
            List altitude = record.get("altitude");            
            if(altitude.contains(-1000000)) {
              record.removeAll("altitude");
            }
            List depth = record.get("depth");            
            if(depth.contains(-1000000)) {
              record.removeAll("depth");
            }
            
            List dateAsLong = record.get("date");            
            if(!dateAsLong.isEmpty()) {
              Date dateValue = new Date((Long)dateAsLong.get(0));              
              record.removeAll("date");
              record.put("date",dateValue);
            }
            List modifiedAsLong = record.get("modified");            
            if(!modifiedAsLong.isEmpty()) {
              Date modifiedValue = new Date((Long)modifiedAsLong.get(0));              
              record.removeAll("modified");
              record.put("modified",modifiedValue);
            }
            
            Set<Integer> taxonKey = new HashSet<Integer>(record.get("taxon_key"));
            taxonKey.remove(-1);
            record.removeAll("taxon_key");             
            record.getFields().putAll("taxon_key",taxonKey);
            return child.process(record);
                """
        }
      }
      # remove unknown Solr fields
      {          
        sanitizeUnknownSolrFields {
          solrLocator : ${SOLR_LOCATOR}
        }
      }           
      # load the record into a Solr server or MapReduce Reducer.
      { 
        loadSolr {
          solrLocator : ${SOLR_LOCATOR}
        }
      }
    ]
  }
]
